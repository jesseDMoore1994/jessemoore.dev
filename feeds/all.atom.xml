<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jessemoore.dev</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2021-10-30T00:00:00-05:00</updated><entry><title>RSS Support now enabled!</title><link href="/rss.html" rel="alternate"></link><published>2021-10-30T00:00:00-05:00</published><updated>2021-10-30T00:00:00-05:00</updated><author><name>Jesse Moore</name></author><id>tag:None,2021-10-30:/rss.html</id><summary type="html">&lt;div class="section" id="where-are-the-feeds"&gt;
&lt;h2&gt;Where are the feeds?&lt;/h2&gt;
&lt;p&gt;One of my friends Morgan was talking to me about this website yesterday and he prefers to read this type of content
using an RSS reader. I don't really use RSS so it wasn't part of my initial deployment as it had not crossed my mind …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="where-are-the-feeds"&gt;
&lt;h2&gt;Where are the feeds?&lt;/h2&gt;
&lt;p&gt;One of my friends Morgan was talking to me about this website yesterday and he prefers to read this type of content
using an RSS reader. I don't really use RSS so it wasn't part of my initial deployment as it had not crossed my mind.&lt;/p&gt;
&lt;p&gt;Pelican to the Rescue! I am now producing atom feeds at the path &lt;tt class="docutils literal"&gt;/feeds&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;One can follow the feed for all blog postings at the following URL:
&lt;a class="reference external" href="https://jessemoore.dev/feeds/all.atom.xml"&gt;https://jessemoore.dev/feeds/all.atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or, if you are only interested in a specific category, you can use follow just that one category. For instance, if you
just get sadistic thrills by listening to me complain about make, you could use:
&lt;a class="reference external" href="https://jessemoore.dev/feeds/make.atom.xml"&gt;https://jessemoore.dev/feeds/make.atom.xml&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican-configuration-to-make-it-possible"&gt;
&lt;h2&gt;Pelican Configuration to make it possible&lt;/h2&gt;
&lt;p&gt;The configuration of this feature was actually very trivial, all I had to do was adjust my &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; to
include the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/all.atom.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;.atom.xml&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope your RSS reader supports Atom feeds Morgan! If not, there are some additional pure RSS settings I can mess with.&lt;/p&gt;
&lt;/div&gt;
</content><category term="pelican"></category><category term="Pelican"></category></entry><entry><title>An interesting GNU Make feature</title><link href="/make-SHELL-issue.html" rel="alternate"></link><published>2021-09-14T00:00:00-05:00</published><updated>2021-09-14T00:00:00-05:00</updated><author><name>Jesse Moore</name></author><id>tag:None,2021-09-14:/make-SHELL-issue.html</id><summary type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;I find that make is one of those tools that I actually need to sit down and read the manual for, but I don't think I'll
ever have the time or attention span to do so. The topic itself is interesting, I would be particularly iterested if
there were …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;I find that make is one of those tools that I actually need to sit down and read the manual for, but I don't think I'll
ever have the time or attention span to do so. The topic itself is interesting, I would be particularly iterested if
there were some interactive programming challenges or other interactive forms of make training that is interactive.
I know a fair bit (At least, I think I do) about makefiles and I feel relatively comfortable with Make.&lt;/p&gt;
&lt;p&gt;But...&lt;/p&gt;
&lt;p&gt;There is always something with make, once you think you are finally safe from shooting yourself in the foot, you will
find a way to do it again. One of my primary complaints when it comes to make is that when it fails, there are rarely
good answers to the fundamental questions of &lt;em&gt;how&lt;/em&gt; or &lt;em&gt;why&lt;/em&gt; the failure is occurring. Sometimes make fails in ways
that might even mislead you to other parts of your projects, such as in this following case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-make-feature"&gt;
&lt;h2&gt;The Make Feature&lt;/h2&gt;
&lt;p&gt;The make feature in question is &lt;tt class="docutils literal"&gt;SHELL&lt;/tt&gt;. For those who know about &lt;tt class="docutils literal"&gt;SHELL&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;SHELL&lt;/tt&gt; is a special variable in gnu
make that is used to define the shell you want to use for your execution of the make recipies in that makefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;SHELL&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; /bin/sh

&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="c"&gt;    # This file touch is run in $(SHELL)&lt;/span&gt;
    touch &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That, in and of itself, I have no strong problems with. In fact, I could find it to be useful if I needed to exploit the
features of a new shell during my build process. That said, when I started work today, I did &lt;strong&gt;NOT&lt;/strong&gt; know, about this
feature at all. I think we know where this is going...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-it-happened"&gt;
&lt;h2&gt;How it Happened&lt;/h2&gt;
&lt;p&gt;Much of my build process at work is docker containers, they are just too convenvient for reproducability. In that way,
Make and docker interact quite frequently at least in my present experience. It is not uncommon for me to use make to
drive some collection of docker commands. Not only are a lot of our projects themselves docker containers, but most of
our tooling is in docker containers too. One of my favorite tools that has a docker container is &lt;tt class="docutils literal"&gt;jq&lt;/tt&gt;. I find it to
be a useful tool when trying to incorporate some more structured data into some element of the pipeline. Many projects
produce json reports that can be used to receive information about the operation that it just performed, or maybe
there is some information that comes as part of a build output. In environments like Jenkins in my case, someone else is
maintaining the executors so I can't just install whatever I want on it. Luckily, docker is installed on them, so if
there is a tool that I need in my build process I can containerize it and use it in the CI/CD pipeline.&lt;/p&gt;
&lt;p&gt;I was working on creating such a project for work. It is a tool that uses some test timing data and generates a set of
graphs and extrapolation data. Just a simple python project that we want to run when we finish the tests to see how our
current builds perform in conjunction with older builds. Well we finally got the tool far enough along that we were
beginning to attach it to the pipeline proper. I started developing a makefile and Jenkinsfile that we would use to
run this dockerized report tool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;docker_name&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; ubuntu
&lt;span class="nv"&gt;DOCKER_VER&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;.04
&lt;span class="nv"&gt;docker_args&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; -v &lt;span class="k"&gt;$(&lt;/span&gt;shell &lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;:/app &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; -t &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-it&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --rm -u &lt;span class="k"&gt;$(&lt;/span&gt;id -u&lt;span class="k"&gt;)&lt;/span&gt;:&lt;span class="k"&gt;$(&lt;/span&gt;id -g&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;DOCKER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; docker run &lt;span class="k"&gt;$(&lt;/span&gt;docker_args&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;docker_name&lt;span class="k"&gt;)&lt;/span&gt;:&lt;span class="k"&gt;$(&lt;/span&gt;DOCKER_VER&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;SHELL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;DOCKER&lt;span class="k"&gt;)&lt;/span&gt; /bin/bash

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="nf"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;SHELL&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the code I wrote, I didn't realize at the time that I was messing with some mystical make variable, I was just
trying to make a variable that I could use to spawn an interactive shell inside of my container. I had inadvertently
just told make to try and run everything through &lt;tt class="docutils literal"&gt;docker run &lt;span class="pre"&gt;-v&lt;/span&gt; &lt;span class="pre"&gt;(...)&lt;/span&gt; ubuntu:20.04 /bin/bash&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;/bin/sh&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Sure enough, make will run with this, and the error you git will be incredibly cryptic. On first glance, this message
seems to suggest that the container is having issues, but it is in fact make doing what you told it to do that is
causing the issue.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -it --rm -v /home/jmoore/projects/app:/app ubuntu:20.04 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;cd /app &amp;amp;&amp;amp; ./app&amp;quot;&lt;/span&gt;
docker: Error response from daemon: failed to create shim: OCI &lt;span class="se"&gt;\&lt;/span&gt;
    runtime create failed: container_linux.go:380: &lt;span class="se"&gt;\&lt;/span&gt;
    starting container process caused: exec: &lt;span class="s2"&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;: executable file &lt;span class="se"&gt;\&lt;/span&gt;
    not found &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$PATH&lt;/span&gt;: unknown.
make: *** &lt;span class="o"&gt;[&lt;/span&gt;Makefile:28: reports&lt;span class="o"&gt;]&lt;/span&gt; Error &lt;span class="m"&gt;127&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only way that I managed to figure out that it had to be the makefile, was that I took that exact same command and
ran it perfectly fine from &lt;tt class="docutils literal"&gt;zsh&lt;/tt&gt;. Andrew and I noticed that and we went to look at he makefile. &lt;tt class="docutils literal"&gt;SHELL&lt;/tt&gt; was the only
variable that we could see causing the issue. Sure enough I renamed the variable and poof, everything is back to normal.&lt;/p&gt;
&lt;/div&gt;
</content><category term="make"></category><category term="Make"></category></entry><entry><title>Powered By Pelican</title><link href="/powered-py-pelican.html" rel="alternate"></link><published>2021-09-12T00:00:00-05:00</published><updated>2021-09-12T00:00:00-05:00</updated><author><name>Jesse Moore</name></author><id>tag:None,2021-09-12:/powered-py-pelican.html</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This blog was created as a place for me to technical writeups of things I have done that may be of interest
to others. I suppose a Hello World! is in order!&lt;/p&gt;
&lt;p&gt;In addition, it was created as a learning experiment with github actions, github pages, and pelican. The …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This blog was created as a place for me to technical writeups of things I have done that may be of interest
to others. I suppose a Hello World! is in order!&lt;/p&gt;
&lt;p&gt;In addition, it was created as a learning experiment with github actions, github pages, and pelican. The following
is a writeup that details how I used those tools in order to build this website.&lt;/p&gt;
&lt;p&gt;I would like to suggest going to view the README.md on github which details the process for developing the webite.
This page is the published version of the output created in the main branch here.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/JesseDMoore1994/jessemoore.dev"&gt;https://github.com/JesseDMoore1994/jessemoore.dev&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican"&gt;
&lt;h2&gt;Pelican&lt;/h2&gt;
&lt;p&gt;Pelican is a pretty neat tool, you can give it a tree of content and it renders it into a statically built website.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  jessemoore.dev git:&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; ✗ tree content
content
├── pages
│   └── about.rst
└── pelican
    └── powered-by-pelican.rst
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Boy that sure is a lot of folders, what do they do?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;The pages folder is used to host pages that are not directly blog posts, think like contact info, resume, other&lt;/dt&gt;
&lt;dd&gt;platforms, etc.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;The pelican folder is a category folder to host articles, this article you are reading currently is in that category.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the future I will likely be adding a folder for each new category, an images folder to store all my images, and more.&lt;/p&gt;
&lt;p&gt;While I am working on the project incrementally, be it adjusting theme or adding new articles, I use the following
command in order to build and display the render locally:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make clean &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make output &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make host
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the simple makefile that I just use to do some housekeeping.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# [main x] {} jessemoore.dev cat Makefile&lt;/span&gt;
&lt;span class="nv"&gt;VENV&lt;/span&gt;&lt;span class="o"&gt;?=&lt;/span&gt;venv
&lt;span class="nv"&gt;VENV_ACTIVATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;. &lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/activate
&lt;span class="nv"&gt;PYTHON&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/python3
&lt;span class="nv"&gt;OUTPUT_FOLDER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;$

&lt;span class="nf"&gt;$(VENV)/bin/activate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;.&lt;span class="n"&gt;txt&lt;/span&gt;
        python3 -m venv &lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;
        ./&lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/pip install -r requirements.txt

&lt;span class="nf"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;VENV&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="n"&gt;bin&lt;/span&gt;/&lt;span class="n"&gt;activate&lt;/span&gt;
        . &lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/activate &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pelican content

&lt;span class="nf"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        . &lt;span class="k"&gt;$(&lt;/span&gt;VENV&lt;span class="k"&gt;)&lt;/span&gt;/bin/activate &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pelican -l output

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        rm -rf output

&lt;span class="nf"&gt;clean-all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        rm -rf venv output

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;-&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way I can view what my changes look like before checking them into main.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;em&gt;To get the themeing displayed locally I have&lt;/em&gt;
&lt;em&gt;to uncomment the RELATIVE_URLS=True variable&lt;/em&gt;
&lt;em&gt;in pelicanconf.py. I comment it back out&lt;/em&gt;
&lt;em&gt;before I push to main so everything links&lt;/em&gt;
&lt;em&gt;correctly in pages.&lt;/em&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="deployment"&gt;
&lt;h2&gt;Deployment&lt;/h2&gt;
&lt;p&gt;I deploy this website automatically to github pages vis github actions from &lt;a class="reference external" href="https://github.com/nelsonjchen/gh-pages-pelican-action"&gt;gh-pages-pelican-action&lt;/a&gt;. Luckily there was already an existing action that did exactly what I wanted it
to with just a few tweaks before using it. I just had create a config file for github to wrap it around my project. I
used the config file from example project for gh-pages-pelican-action as the base for this one.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  jessemoore.dev git:(main) ✗ cat .github/workflows/pelican.yml
name: Pelican site CI

on:
  # Trigger the workflow on push or pull request,
  # but only for the master branch
  push:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout source repository
      uses: actions/checkout@v2
      with:
        submodules: true
    - uses: JesseDMoore1994/gh-pages-pelican-action@0.1.10
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By doing this, whenever I submit code to the main branch of my repository, the code is checked out, then the action
at version &lt;a class="reference external" href="https://github.com/jesseDMoore1994/gh-pages-pelican-action/tree/0.1.10"&gt;0.1.10&lt;/a&gt; on my github is used to
deploy the output to the gh-pages branch.&lt;/p&gt;
&lt;p&gt;Make sure to follow the &lt;a class="reference external" href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site"&gt;instructions&lt;/a&gt; for setting up github pages on your repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-did-you-get-a-domain"&gt;
&lt;h2&gt;How did you get a domain?&lt;/h2&gt;
&lt;p&gt;I use google domains to redirect traffic from &lt;a class="reference external" href="https://jessemoore.dev"&gt;https://jessemoore.dev&lt;/a&gt; to &lt;a class="reference external" href="https://jessedmoore1994.github.io/jessemoore.dev"&gt;https://jessedmoore1994.github.io/jessemoore.dev&lt;/a&gt;.
Check out google domains &lt;a class="reference external" href="https://domains.google.com"&gt;here&lt;/a&gt;. I also have email forwarding for the domain, so please shoot me
one if you feel the need using &lt;a class="reference external" href="mailto:jesse&amp;#64;jessemoore.dev"&gt;jesse&amp;#64;jessemoore.dev&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-this-article"&gt;
&lt;h2&gt;Creating this article!&lt;/h2&gt;
&lt;p&gt;To create this article, I created the following rst called pelican.rst to the &lt;a class="reference external" href="https://github.com/jesseDMoore1994/pelican-test/tree/main/content/pelican"&gt;pelican category folder&lt;/a&gt; mentioned earlier. Thats it! One article
down! 😊&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-non-blog-content"&gt;
&lt;h2&gt;Creating non-blog content!&lt;/h2&gt;
&lt;p&gt;You can create non-blog content too, I created the following rst called about.rst in the &lt;a class="reference external" href="https://github.com/jesseDMoore1994/pelican-test/tree/main/content/pages"&gt;pages folder&lt;/a&gt;. I will soon be updating it to include
more about myself, post socials, etc. I also want to create a page to host my resume.&lt;/p&gt;
&lt;/div&gt;
</content><category term="pelican"></category><category term="Pelican"></category></entry></feed>